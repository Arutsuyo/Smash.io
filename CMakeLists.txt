cmake_minimum_required(VERSION 2.8.12.1)

PROJECT(SSBM)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")
set(THREADS_PREFER_PTHREAD_FLAG ON)
find_package(Threads REQUIRED)

IF(CMAKE_BUILD_TYPE MATCHES Debug)
	message("Debug build.")
	add_definitions(-DDEBUG)
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
	set(CMAKE_BUILD_TYPE Debug)
ELSE(CMAKE_BUILD_TYPE MATCHES Release)
	message("Release build.")
ENDIF()

SET (CMAKE_SHARED_LINKER_FLAGS)
IF(WIN32)
	add_definitions(-D_CRT_SECURE_NO_WARNINGS)
	add_definitions(-DSTBI_MSC_SECURE_CRT)
endif()

FILE(GLOB SOURCE_SOURCE ${CMAKE_SOURCE_DIR}/Src/*.cpp)
FILE(GLOB SOURCE_HEADERS ${CMAKE_SOURCE_DIR}/Src/*.h)

IF(WIN32)
	SOURCE_GROUP("Sources" FILES${SOURCE_SOURCE})
	SOURCE_GROUP("Headers" FILES${SOURCE_HEADERS})
endif()

SET(SOURCES ${SOURCE_SOURCE})
SET(HEADERS ${SOURCE_HEADERS})

include_directories(${CMAKE_SOURCE_DIR}/include)
IF(WIN32)
	LINK_DIRECTORIES(${CMAKE_SOURCE_DIR}/lib/Win32)
ELSE()
	LINK_DIRECTORIES(${CMAKE_SOURCE_DIR}/lib)
ENDIF()
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/lib)
IF(WIN32)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
ENDIF()
add_executable(SSBM ${SOURCES} ${HEADERS})
target_link_libraries(SSBM Threads::Threads)

configure_file(
	"${CMAKE_SOURCE_DIR}/Py/trainer.py"
	"${CMAKE_BINARY_DIR}/trainer.py" 
	COPYONLY)
file(COPY "${CMAKE_SOURCE_DIR}/Files" DESTINATION ${CMAKE_BINARY_DIR})
file(COPY "${CMAKE_SOURCE_DIR}/AI" DESTINATION ${CMAKE_BINARY_DIR})
